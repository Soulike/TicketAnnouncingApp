{"version":3,"sources":["Pages/EventNameInput/Style.module.scss","Pages/EventPage/Components/TopBar/Style.module.scss","Components/Root/Style.module.scss","serviceWorker.js","ModuleConfig/Antd.js","Pages/EventNameInput/View.js","Function/Util.js","Function/LocalStorage.js","Function/index.js","Pages/EventNameInput/Container.js","Pages/EventNameInput/index.js","Pages/EventPage/Components/TopBar/View.js","Pages/EventPage/Components/TopBar/index.js","Pages/EventPage/Components/VoteStatus/View.js","Pages/EventPage/Components/VoteStatus/index.js","Pages/EventPage/View.js","Pages/EventPage/Object.js","Pages/EventPage/index.js","Pages/EventPage/Container.js","CONFIG/PAGE.js","Components/Root/View.js","Components/Root/index.js","Router/index.js","Router/Router.js","index.js","Pages/EventPage/Style.module.scss","Pages/EventPage/Components/VoteStatus/Style.module.scss"],"names":["module","exports","EventNameInput","formWrapper","eventNameInput","TopBar","eventName","Root","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","moment","locale","React","memo","props","onEventNameInputChange","onConfirmButtonClick","react_default","a","createElement","className","Style","input_default","size","placeholder","value","onChange","autoFocus","button_default","type","onClick","Storage","Object","classCallCheck","this","content","createClass","key","n","Number","isInteger","keys","TypeError","toString","storage","localStorage","getItem","e","setEventName","setItem","getEventName","removeEventName","removeItem","setPeopleList","peopleList","JSON","stringify","getPeopleList","peopleListJson","parse","removePeopleList","Function","objectSpread","LocalStorage","Util","_this","possibleConstructorReturn","getPrototypeOf","call","setState","target","message","success","history","push","PAGE_ID_TO_ROUTE","PAGE_ID","EVENT_PAGE","View","Component","Container","withRouter","_props$people","people","name","numberOfVote","onAddVoteButtonClick","onDeleteButtonClick","onMinusVoteButtonClick","VoteStatus","wrapper","peopleName","concat","rightWrapper","tagWrapper","tooltip_default","title","tag_default","color","shape","icon_default","popconfirm_default","onConfirm","placement","onAddPeopleButtonClick","addPeopleModalVisible","onAddPeopleModalOk","onAddPeopleModalCancel","onNewPeopleNameChange","newPeopleName","onAddVoteButtonClickFactory","onMinusVoteButtonClickFactory","onDeleteButtonClickFactory","EventPage","voteStatusList","length","emptyWrapper","empty_default","description","map","i","voteStatusWrapper","addPeopleButtonWrapper","addPeopleButton","back_top_default","backToTopButton","modal_default","destroyOnClose","visible","onOk","onCancel","width","People","_this$state","warning","forceUpdate","peopleId","currentPeople","splice","notification","EVENT_NAME_INPUT","_this$state2","EventPage_View","toConsumableArray","Symbol","_PAGE_ID_TO_ROUTE","defineProperty","PAGE_ID_TO_COMPONENT","_PAGE_ID_TO_COMPONENT","children","Router","react_router_dom","react_router","values","id","path","component","to","ReactDOM","render","locale_provider_default","zhCN","src_Router","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e61e0bb1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"EventNameInput\":\"Style_EventNameInput__1xJmj\",\"formWrapper\":\"Style_formWrapper__3P_-M\",\"eventNameInput\":\"Style_eventNameInput__j1ujX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TopBar\":\"Style_TopBar__2Nzog\",\"eventName\":\"Style_eventName__ngTHH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Root\":\"Style_Root__3piOA\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'antd/dist/antd.min.css';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\n\nmoment.locale('zh-cn');","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Style from './Style.module.scss';\nimport Input from 'antd/lib/input';\nimport Button from 'antd/lib/button';\n\nfunction EventNameInputView(props)\n{\n    const {\n        onEventNameInputChange,\n        eventName,\n        onConfirmButtonClick,\n    } = props;\n    return (\n        <div className={Style.EventNameInput}>\n            <div className={Style.formWrapper}>\n                <Input size={'large'}\n                       placeholder={'+ 添加活动'}\n                       className={Style.eventNameInput}\n                       value={eventName}\n                       onChange={onEventNameInputChange}\n                       autoFocus={true} />\n                <Button type={'primary'} onClick={onConfirmButtonClick}>确定</Button>\n            </div>\n        </div>\n    );\n}\n\nEventNameInputView.propTypes = {\n    onEventNameInputChange: PropTypes.func.isRequired,\n    eventName: PropTypes.string.isRequired,\n    onConfirmButtonClick: PropTypes.func.isRequired,\n};\n\nexport default React.memo(EventNameInputView);","/**\n * @constructor\n * */\nexport class Storage\n{\n    constructor()\n    {\n        this.content = {};\n    }\n\n    /**\n     * @param {number} n\n     * */\n    key(n)\n    {\n        if (!Number.isInteger(n))\n        {\n            throw new TypeError('The parameter key must be an integer');\n        }\n        else\n        {\n            return Object.keys(this.content)[n];\n        }\n    };\n\n    /**\n     * @param {string} key\n     * */\n    getItem(key)\n    {\n        return this.content[key];\n    }\n\n    /**\n     * @param {string} key\n     * @param {string} value\n     * */\n    setItem(key, value)\n    {\n        this.content[key] = value.toString();\n    }\n\n    /**\n     * @param {string} key\n     * */\n    removeItem(key)\n    {\n        delete this.content[key];\n    }\n\n    clear()\n    {\n        this.content = {};\n    }\n}","import {Storage} from './Util';\n\nlet storage = null;\n\ntry\n{\n    storage = window.localStorage;\n    window.localStorage.getItem('');\n}\ncatch (e)\n{\n    storage = new Storage();\n}\n\nexport function setEventName(eventName)\n{\n    storage.setItem('eventName', eventName);\n}\n\nexport function getEventName()\n{\n    return storage.getItem('eventName');\n}\n\nexport function removeEventName()\n{\n    storage.removeItem('eventName');\n}\n\nexport function setPeopleList(peopleList)\n{\n    storage.setItem('peopleList', JSON.stringify(peopleList));\n}\n\nexport function getPeopleList()\n{\n    try\n    {\n        const peopleListJson = storage.getItem('peopleList');\n        if (peopleListJson)\n        {\n            return JSON.parse(peopleListJson);\n        }\n        else\n        {\n            return [];\n        }\n    }\n    catch (e)\n    {\n        return [];\n    }\n}\n\nexport function removePeopleList()\n{\n    storage.removeItem('peopleList');\n}","import * as  LocalStorage from './LocalStorage';\nimport * as Util from './Util';\n\nexport default {\n    ...LocalStorage,\n    ...Util,\n};","import React from 'react';\nimport message from 'antd/lib/message';\nimport View from './View';\nimport {PAGE_ID, PAGE_ID_TO_ROUTE} from '../../CONFIG';\nimport {withRouter} from 'react-router-dom';\nimport Function from '../../Function';\n\nclass EventNameInput extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            eventName: '',\n        };\n    }\n\n    componentDidMount()\n    {\n        Function.removeEventName();\n        Function.removePeopleList();\n    }\n\n    onEventNameInputChange = e =>\n    {\n        this.setState({\n            eventName: e.target.value,\n        });\n    };\n\n    onConfirmButtonClick = () =>\n    {\n        const {eventName} = this.state;\n        Function.setEventName(eventName);\n        message.success('新建活动成功');\n        this.props.history.push(PAGE_ID_TO_ROUTE[PAGE_ID.EVENT_PAGE]);\n    };\n\n    render()\n    {\n        const {eventName} = this.state;\n        return (\n            <View eventName={eventName}\n                  onEventNameInputChange={this.onEventNameInputChange}\n                  onConfirmButtonClick={this.onConfirmButtonClick} />\n        );\n    }\n}\n\nexport default withRouter(EventNameInput);","import Container from './Container';\n\nexport default Container;","import React from 'react';\nimport Style from './Style.module.scss';\nimport PropTypes from 'prop-types';\n\nfunction TopBarView(props)\n{\n    const {eventName} = props;\n    return (\n        <div className={Style.TopBar}>\n            <span className={Style.eventName}>{eventName}</span>活动\n        </div>\n    );\n}\n\nTopBarView.propTypes = {\n    eventName: PropTypes.string.isRequired,\n};\n\nexport default React.memo(TopBarView);","import View from './View';\n\nexport default View;","import React from 'react';\nimport Style from './Style.module.scss';\nimport PropTypes from 'prop-types';\nimport Tag from 'antd/lib/tag';\nimport Button from 'antd/lib/button';\nimport Icon from 'antd/lib/icon';\nimport ToolTip from 'antd/lib/tooltip';\nimport Popconfirm from 'antd/lib/popconfirm';\n\nfunction VoteStatusView(props)\n{\n    const {people: {name, numberOfVote}, onAddVoteButtonClick, onDeleteButtonClick, onMinusVoteButtonClick} = props;\n    return (\n        <div className={Style.VoteStatus}>\n            <div className={Style.wrapper}>\n                <div className={Style.peopleName}>{name}</div>\n            </div>\n            <div className={`${Style.wrapper} ${Style.rightWrapper}`}>\n                <div className={Style.tagWrapper}>\n                    <ToolTip title={'得票数'}>\n                        <Tag className={Style.numberOfVote} color={'blue'}>{numberOfVote}</Tag>\n                    </ToolTip>\n                </div>\n                <ToolTip title={`为${name}加一票`}>\n                    <Button type={'primary'} shape={'circle'} onClick={onAddVoteButtonClick}>\n                        <Icon type=\"plus\" />\n                    </Button>\n                </ToolTip>\n                <ToolTip title={`为${name}减一票`}>\n                    <Button shape={'circle'} onClick={onMinusVoteButtonClick}>\n                        <Icon type=\"minus\" />\n                    </Button>\n                </ToolTip>\n                <ToolTip title={`删除${name}`}>\n                    <Popconfirm title={`确认删除 ${name}？`} onConfirm={onDeleteButtonClick} placement={'left'}>\n                        <Button shape={'circle'} type={'danger'}>\n                            <Icon type=\"delete\" />\n                        </Button>\n                    </Popconfirm>\n                </ToolTip>\n            </div>\n        </div>\n    );\n}\n\nVoteStatusView.propTypes = {\n    people: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        numberOfVote: PropTypes.number.isRequired,\n    }).isRequired,\n    onAddVoteButtonClick: PropTypes.func.isRequired,\n    onMinusVoteButtonClick: PropTypes.func.isRequired,\n    onDeleteButtonClick: PropTypes.func.isRequired,\n};\n\nexport default React.memo(VoteStatusView);","import View from './View';\n\nexport default View;","import React from 'react';\nimport Style from './Style.module.scss';\nimport PropTypes from 'prop-types';\nimport TopBar from './Components/TopBar';\nimport Button from 'antd/lib/button';\nimport Tooltip from 'antd/lib/tooltip';\nimport Modal from 'antd/lib/modal';\nimport Input from 'antd/lib/input';\nimport VoteStatus from './Components/VoteStatus';\nimport Empty from 'antd/lib/empty';\nimport BackTop from 'antd/lib/back-top';\n\nfunction EventPage(props)\n{\n    const {\n        eventName,\n        onAddPeopleButtonClick,\n        addPeopleModalVisible,\n        onAddPeopleModalOk,\n        onAddPeopleModalCancel,\n        onNewPeopleNameChange,\n        newPeopleName,\n        peopleList,\n        onAddVoteButtonClickFactory,\n        onMinusVoteButtonClickFactory,\n        onDeleteButtonClickFactory,\n    } = props;\n    return (\n        <div className={Style.EventPage}>\n            <TopBar eventName={eventName} />\n            <div className={Style.voteStatusList}>\n                {\n                    peopleList.length === 0 ?\n                        <div className={Style.emptyWrapper}><Empty description={'暂无人员'} /></div> :\n                        peopleList.map((people, i) => (\n                                <div className={Style.voteStatusWrapper}>\n                                    <VoteStatus people={people}\n                                                onAddVoteButtonClick={onAddVoteButtonClickFactory(i)}\n                                                onDeleteButtonClick={onDeleteButtonClickFactory(i)}\n                                                onMinusVoteButtonClick={onMinusVoteButtonClickFactory(i)}\n                                                key={i} /></div>\n                            ),\n                        )\n                }\n\n            </div>\n            <div className={Style.addPeopleButtonWrapper}>\n                <Tooltip title={'添加人员'}>\n                    <Button shape={'circle'}\n                            size={'large'}\n                            type={'primary'}\n                            className={Style.addPeopleButton}\n                            onClick={onAddPeopleButtonClick}>\n                        +\n                    </Button>\n                </Tooltip>\n            </div>\n            <BackTop className={Style.backToTopButton} />\n            <Modal destroyOnClose={true}\n                   title={'添加人员'}\n                   visible={addPeopleModalVisible}\n                   onOk={onAddPeopleModalOk}\n                   onCancel={onAddPeopleModalCancel} width={300}>\n                <Input placeholder={'新人员的名字'} autoFocus={true} value={newPeopleName} onChange={onNewPeopleNameChange} />\n            </Modal>\n        </div>\n    );\n}\n\nEventPage.propTypes = {\n    eventName: PropTypes.string.isRequired,\n    onAddPeopleButtonClick: PropTypes.func.isRequired,\n    addPeopleModalVisible: PropTypes.bool.isRequired,\n    onAddPeopleModalOk: PropTypes.func.isRequired,\n    onAddPeopleModalCancel: PropTypes.func.isRequired,\n    onNewPeopleNameChange: PropTypes.func.isRequired,\n    newPeopleName: PropTypes.string.isRequired,\n    peopleList: PropTypes.arrayOf(PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        numberOfVote: PropTypes.number.isRequired,\n    })).isRequired,\n    onAddVoteButtonClickFactory: PropTypes.func.isRequired,\n    onMinusVoteButtonClickFactory: PropTypes.func.isRequired,\n    onDeleteButtonClickFactory: PropTypes.func.isRequired,\n};\n\nexport default React.memo(EventPage);","export class People\n{\n    /**\n     * @constructor\n     * @param {string} name\n     * @param {number} numberOfVote\n     * */\n    constructor(name, numberOfVote)\n    {\n        this.name = name;\n        this.numberOfVote = numberOfVote;\n    }\n}","import Container from './Container';\n\nexport default Container;","import React from 'react';\nimport View from './View';\nimport message from 'antd/lib/message';\nimport {PAGE_ID, PAGE_ID_TO_ROUTE} from '../../CONFIG';\nimport {People} from './Object';\nimport notification from 'antd/lib/notification';\nimport Function from '../../Function';\n\nclass EventPage extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            eventName: '',\n            addPeopleModalVisible: false,\n            newPeopleName: '',\n\n            peopleList: [], // 人员得票情况表，其下标就是其 ID\n        };\n    }\n\n    componentDidMount()\n    {\n        const eventName = Function.getEventName();\n        if (eventName)\n        {\n            this.setState({\n                eventName,\n            });\n        }\n        else\n        {\n            message.warning('请先创建活动');\n            this.props.history.push(PAGE_ID_TO_ROUTE[PAGE_ID.EVENT_NAME_INPUT]);\n        }\n\n        const peopleList = Function.getPeopleList();\n        this.setState({\n            peopleList,\n        });\n\n        // 以下是测试代码\n        /*import('faker').then(faker =>\n        {\n            const {peopleList} = this.state;\n            for (let i = 0; i < 20; i++)\n            {\n                peopleList.push(new People(faker.name.findName(), 0));\n            }\n            Function.setPeopleList(peopleList);\n            this.forceUpdate();\n        });*/\n    }\n\n    onAddPeopleButtonClick = () =>\n    {\n        this.setState({\n            addPeopleModalVisible: true,\n        });\n    };\n\n    onAddPeopleModalOk = () =>\n    {\n        const {newPeopleName, peopleList} = this.state;\n        if (newPeopleName.length === 0)\n        {\n            message.warning('请输入新人员的名字');\n        }\n        else\n        {\n            peopleList.push(new People(newPeopleName, 0));\n            Function.setPeopleList(peopleList);\n            this.forceUpdate();\n            this.setState({\n                addPeopleModalVisible: false,\n                newPeopleName: '',\n            });\n        }\n    };\n\n    onAddPeopleModalCancel = () =>\n    {\n        this.setState({\n            addPeopleModalVisible: false,\n            newPeopleName: '',\n        });\n    };\n\n    onNewPeopleNameChange = e =>\n    {\n        this.setState({\n            newPeopleName: e.target.value,\n        });\n    };\n\n    onAddVoteButtonClickFactory = peopleId =>\n    {\n        return () =>\n        {\n            const {peopleList} = this.state;\n            const currentPeople = peopleList[peopleId];\n            currentPeople.numberOfVote++;\n            Function.setPeopleList(peopleList);\n            this.forceUpdate();\n        };\n    };\n\n    onMinusVoteButtonClickFactory = peopleId =>\n    {\n        return () =>\n        {\n            const {peopleList} = this.state;\n            const currentPeople = peopleList[peopleId];\n            if (currentPeople.numberOfVote > 0)\n            {\n                currentPeople.numberOfVote--;\n                Function.setPeopleList(peopleList);\n                this.forceUpdate();\n            }\n        };\n    };\n\n    onDeleteButtonClickFactory = peopleId =>\n    {\n        return () =>\n        {\n            const {peopleList} = this.state;\n            const currentPeople = peopleList[peopleId];\n            peopleList.splice(peopleId, 1);\n            Function.setPeopleList(peopleList);\n            this.forceUpdate(() =>\n            {\n                notification.success({\n                    description: `人员${currentPeople.name}已删除`,\n                    message: `删除成功`,\n                });\n            });\n        };\n    };\n\n    render()\n    {\n        const {eventName, peopleList, addPeopleModalVisible, newPeopleName} = this.state;\n        return (\n            <View eventName={eventName}\n                  addPeopleModalVisible={addPeopleModalVisible}\n                  onAddPeopleButtonClick={this.onAddPeopleButtonClick}\n                  onAddPeopleModalOk={this.onAddPeopleModalOk}\n                  onAddPeopleModalCancel={this.onAddPeopleModalCancel}\n                  newPeopleName={newPeopleName}\n                  onNewPeopleNameChange={this.onNewPeopleNameChange}\n                  peopleList={[...peopleList]}  // 必须每次都传入一个新的数组才能保证 View 正确更新\n                  onAddVoteButtonClickFactory={this.onAddVoteButtonClickFactory}\n                  onMinusVoteButtonClickFactory={this.onMinusVoteButtonClickFactory}\n                  onDeleteButtonClickFactory={this.onDeleteButtonClickFactory} />\n        );\n    }\n}\n\nexport default EventPage;","import EventNameInput from '../Pages/EventNameInput';\nimport EventPage from '../Pages/EventPage';\n\nexport const PAGE_ID = {\n    EVENT_NAME_INPUT: Symbol('EVENT_NAME_INPUT'),\n    EVENT_PAGE: Symbol('EVENT_PAGE'),\n};\n\nexport const PAGE_ID_TO_ROUTE = {\n    [PAGE_ID.EVENT_NAME_INPUT]: '/eventNameInput',\n    [PAGE_ID.EVENT_PAGE]: '/eventPage',\n};\n\nexport const PAGE_ID_TO_COMPONENT = {\n    [PAGE_ID.EVENT_NAME_INPUT]: EventNameInput,\n    [PAGE_ID.EVENT_PAGE]: EventPage,\n};","import React from 'react';\nimport Style from './Style.module.scss';\n\nfunction RootView(props)\n{\n    const {children} = props;\n    return (\n        <main className={Style.Root}>\n            {children}\n        </main>\n    );\n}\n\nexport default React.memo(RootView);","import View from './View';\n\nexport default View;","import Router from './Router';\n\nexport default Router;","import React from 'react';\nimport {HashRouter, Redirect, Route, Switch} from 'react-router-dom';\nimport {PAGE_ID, PAGE_ID_TO_COMPONENT, PAGE_ID_TO_ROUTE} from '../CONFIG';\nimport Root from '../Components/Root';\n\nexport default () =>\n{\n    return (\n        <HashRouter>\n            <Root>\n                <Switch>\n                    {\n                        Object.values(PAGE_ID).map(id => <Route path={PAGE_ID_TO_ROUTE[id]}\n                                                                component={PAGE_ID_TO_COMPONENT[id]}\n                                                                key={PAGE_ID_TO_ROUTE[id]} />)\n                    }\n                    <Route children={<Redirect to={PAGE_ID_TO_ROUTE[PAGE_ID.EVENT_NAME_INPUT]} />} />\n                </Switch>\n            </Root>\n        </HashRouter>\n    );\n};","import 'core-js/stable';\nimport 'normalize.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport './ModuleConfig';\nimport zhCN from 'antd/lib/locale-provider/zh_CN';\nimport LocaleProvider from 'antd/lib/locale-provider';\nimport Router from './Router';\n\nReactDOM.render(\n    <LocaleProvider locale={zhCN}>\n        <Router />\n    </LocaleProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"EventPage\":\"Style_EventPage__1Gbpf\",\"voteStatusList\":\"Style_voteStatusList__2aVxK\",\"voteStatusWrapper\":\"Style_voteStatusWrapper__2gE8k\",\"emptyWrapper\":\"Style_emptyWrapper__35zJd\",\"backToTopButton\":\"Style_backToTopButton__1_jNA\",\"addPeopleButtonWrapper\":\"Style_addPeopleButtonWrapper__2iDjP\",\"addPeopleButton\":\"Style_addPeopleButton__35PRy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"VoteStatus\":\"Style_VoteStatus__SquQc\",\"wrapper\":\"Style_wrapper__1GhP8\",\"rightWrapper\":\"Style_rightWrapper__3VOBc\",\"tagWrapper\":\"Style_tagWrapper__2CH7G\",\"numberOfVote\":\"Style_numberOfVote__u-D1e\"};"],"sourceRoot":""}